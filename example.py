#!/usr/bin/python# -*- coding: utf-8 -*-import osimport timefrom functools import wrapsdef fn_timer(function):    @wraps(function)    def function_timer(*args, **kwargs):        t0 = time.time()        result = function(*args, **kwargs)        t1 = time.time()        print ("Total time running %s: %s seconds" %               (function.func_name, str(t1 - t0))               )        return result    return function_timer@fn_timerdef openfile(trace_file):    inst = 1    counter_dict = {}    dir = os.path.abspath('.')    file_name = os.path.join(dir, trace_file)    trace_lines = open(file_name, 'r').readlines()    sub_str = "Inst[1]:"    flen = len(trace_lines) - 1    for line in range(flen):        if sub_str in trace_lines[line]:            opcode = trace_lines[line+1].strip('\n').split(',')            instructions = ud_insn_asm(opcode[1])            b = instructions.find(' ')            instruct = instructions[0:b]            if instruct not in counter_dict:                counter_dict.setdefault(instruct,[inst])            else:                counter_dict[instruct].append(inst)            inst = inst + 1    print "open trace.log success!\n"    return counter_dictdef ud_insn_asm(ud_obj):    list_obj = []    set_mode = " -64 "    hex_code = ud_obj.split('x')    obj = hex_code[1]    length = len(obj)    for i in range(0, length, 2):        list_obj.append(obj[i:i + 2])    shell_obj = " ".join(list_obj)    command = "echo " + shell_obj + "|udcli" + set_mode + "-x -att -noff"    p = os.popen(command)    a = p.read()    insn_asm = a[17:42]    p.close()    return insn_asmdef gen_file(result_file, counter):    dir = os.path.abspath('.')    file_name = os.path.join(dir, result_file)    writer_ptr = open(file_name, "w")    for key,value in counter.iteritems():        writer_ptr.write(str(key) + " : " + str(len(value)) + "\n" + str(value) + "\n\n")    print "write done!\n"    writer_ptr.close()if __name__ == "__main__":    trace_file = "trace.log"    result_file = 'result.txt'    count_dict = openfile(trace_file)    gen_file(result_file, count_dict)